// Generated by CoffeeScript 1.9.2
(function() {
  var getPlugins, plugins, validation;

  getPlugins = require('../utils').getPlugins;

  plugins = getPlugins();

  validation = {
    _is_team: function(doc) {
      return doc._id.indexOf('team_') === 0;
    },
    _is_user: function(doc) {
      return doc._id.indexOf('org.couchdb.user:') === 0;
    },
    _get_doc_type: function(doc) {
      if (validation._is_team(doc)) {
        return 'team';
      } else if (validation._is_user(doc)) {
        return 'user';
      } else {

      }
    },
    _validate: function(fn_name, auth_args, val_args) {
      var authorized, e;
      authorized = validation.auth[fn_name].apply(null, auth_args);
      if (!authorized) {
        throw {
          state: 'unauthorized',
          err: 'You do not have the privileges necessary to perform the action.'
        };
      }
      try {
        return validation.validation[fn_name].apply(null, val_args);
      } catch (_error) {
        e = _error;
        if (typeof e !== 'string') {
          e = JSON.stringify(e);
        }
        throw {
          state: 'invalid',
          err: e
        };
      }
    },
    add_team: function(actor, team) {
      return validation._validate('add_team', [actor], [team]);
    },
    remove_team: function(actor, team) {
      return validation._validate('remove_team', [actor], [team]);
    },
    add_team_asset: function(actor, team, resource, asset) {
      return validation._validate('add_team_asset', [actor, team, resource], [team, resource, asset]);
    },
    remove_team_asset: function(actor, team, resource, asset) {
      return validation._validate('remove_team_asset', [actor, team, resource], [team, resource, asset]);
    },
    add_team_member: function(actor, team, user, role) {
      return validation._validate('add_team_member', [actor, team, role], [team, user, role]);
    },
    remove_team_member: function(actor, team, user, role) {
      return validation._validate('remove_team_member', [actor, team, role], [team, user, role]);
    },
    proxy_asset_action: function(actor, team, resource, asset, path, method, body, req) {
      return validation._validate('proxy_asset_action', arguments, arguments);
    },
    proxy_resource: function(actor, team, resource, proxyAction, asset) {
      return validation._validate('proxy_resource', [actor, team, resource, proxyAction], [actor, team, resource, proxyAction, asset]);
    },
    add_user: function(actor, user) {
      return validation._validate('add_user', [actor], [user]);
    },
    remove_user: function(actor, user) {
      return validation._validate('remove_user', [actor], [user]);
    },
    add_resource_role: function(actor, user, resource, role) {
      return validation._validate('add_resource_role', [actor, resource, role], [user, resource, role]);
    },
    remove_resource_role: function(actor, user, resource, role) {
      return validation._validate('remove_resource_role', [actor, resource, role], [user, resource, role]);
    },
    add_user_data: function(actor, old_user, new_user) {
      return validation._validate('add_user_data', [actor, old_user], [actor, old_user, new_user]);
    },
    actions: {
      team: {
        't+': function(event, actor, old_team, new_team) {
          return validation.add_team(actor, new_team);
        },
        'a+': function(event, actor, old_team, new_team) {
          return validation.add_team_asset(actor, old_team, event.resource, event.asset);
        },
        'a-': function(event, actor, old_team, new_team) {
          return validation.remove_team_asset(actor, old_team, event.resource, event.asset);
        },
        'u+': function(event, actor, old_team, new_team) {
          return validation.add_team_member(actor, old_team, null, event.role);
        },
        'u-': function(event, actor, old_team, new_team) {
          return validation.remove_team_member(actor, old_team, null, event.role);
        }
      },
      user: {
        'r+': function(event, actor, old_user, new_user) {
          return validation.add_resource_role(actor, new_user, event.resource, event.role);
        },
        'r-': function(event, actor, old_user, new_user) {
          return validation.remove_resource_role(actor, new_user, event.resource, event.role);
        },
        'u+': function(event, actor, old_user, new_user) {
          return validation.add_user(actor, old_user || new_user);
        },
        'u-': function(event, actor, old_user, new_user) {
          return validation.remove_user(actor, old_user);
        },
        'd+': function(event, actor, old_user, new_user) {
          return validation.add_user_data(actor, old_user, new_user);
        }
      }
    }
  };

  validation.auth = require('./authorization')(validation, plugins);

  validation.validation = require('./validation')(validation, plugins);

  require('./schema/index')(validation);

  module.exports = validation;

}).call(this);
