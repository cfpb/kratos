// Generated by CoffeeScript 1.9.2
(function() {
  var deepExtend, validation,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  deepExtend = require('pantheon-helpers').utils.deepExtend;

  validation = function(validation, plugins) {
    var auth, vali;
    auth = validation.auth;
    vali = {
      add_team: function(team) {},
      remove_team: function(team) {},
      add_team_asset: function(team, resource, asset) {
        var ref;
        if (((ref = validation.validation[resource]) != null ? ref.add_team_asset : void 0) == null) {
          throw 'resource, ' + resource + ', does not support adding assets';
        }
        return validation.validation[resource].add_team_asset(team, asset);
      },
      remove_team_asset: function(team, resource, asset) {
        var ref;
        if (((ref = validation.validation[resource]) != null ? ref.remove_team_asset : void 0) == null) {
          throw 'resource, ' + resource + ', does not support removing assets';
        }
        return validation.validation[resource].remove_team_asset(team, asset);
      },
      add_team_member: function(team, user, role) {
        if (indexOf.call(auth.roles.team_admin, role) < 0 && indexOf.call(auth.roles.team, role) < 0) {
          throw 'invalid role: ' + role;
        }
      },
      remove_team_member: function(team, user, role) {},
      add_user: function(user) {},
      remove_user: function(user) {},
      add_resource_role: function(user, resource, role) {
        if (!auth.is_active_user(user)) {
          throw 'invalid user: ' + user.name;
        }
        if (indexOf.call(auth.roles.resource[resource] || [], role) < 0) {
          throw 'invalid role: ' + role;
        }
      },
      remove_resource_role: function(user, resource, role) {},
      proxy_resource: function(actor, team, resource, proxyAction, asset) {
        var ref, ref1, ref2, ref3;
        if (!((ref = validation.validation[resource]) != null ? (ref1 = ref.proxy) != null ? ref1[proxyAction] : void 0 : void 0)) {
          throw 'the ' + resource + ' resource does not support this action';
        }
        return (ref2 = validation.validation[resource]) != null ? (ref3 = ref2.proxy) != null ? ref3[proxyAction](actor, team, asset) : void 0 : void 0;
      },
      add_user_data: function(actor, old_user, new_user) {
        var form, form_type, merged_validated_new_data, merged_validated_old_data, new_data, old_data, validated_data;
        old_data = old_user.data;
        new_data = new_user.data;
        if (auth.is_system_user(actor)) {
          form_type = 'system';
        } else if (auth.is_same_user(actor, old_user)) {
          form_type = 'self';
        } else {
          throw "invalid authorization";
        }
        form = validation.schema.user_data[form_type]({
          value: new_data
        });
        validated_data = form.getClean();
        merged_validated_old_data = deepExtend(old_data, validated_data);
        merged_validated_new_data = deepExtend(new_data, validated_data);
        if (JSON.stringify(merged_validated_new_data) !== JSON.stringify(merged_validated_old_data)) {
          throw 'Modifications not allowed by schema';
        }
      }
    };
    plugins.forEach(function(plugin) {
      return vali[plugin.name] = plugin.validation(validation);
    });
    return vali;
  };

  module.exports = validation;

}).call(this);
