// Generated by CoffeeScript 1.9.2
(function() {
  var _,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  module.exports = function(validation, plugins) {
    var auth;
    auth = {};
    auth.is_same_user = function(user1, user2) {
      return user1.name === user2.name;
    };
    auth.is_system_user = function(user) {
      var ref;
      return (ref = user.name) === 'admin';
    };
    auth.is_kratos_system_user = function(user) {
      return user.name === 'admin';
    };
    auth.is_active_user = function(user) {
      return auth.is_system_user(user) || indexOf.call(user.roles || [], 'kratos|enabled') >= 0;
    };
    auth._has_resource_role = function(user, resource, role) {
      var ref;
      return auth.is_active_user(user) && (auth.is_system_user(user) || (ref = resource + '|' + role, indexOf.call(user.roles || [], ref) >= 0));
    };
    auth._has_team_role = function(user, team, role) {
      var ref, user_id;
      user_id = user.name;
      return auth.is_active_user(user) && (auth.is_system_user(user) || indexOf.call(((ref = team.roles[role]) != null ? ref.members : void 0) || [], user_id) >= 0);
    };
    auth._is_resource_admin = function(user, resource) {
      return auth._has_resource_role(user, resource, 'admin');
    };
    auth._is_team_admin = function(user, team) {
      return auth._has_team_role(user, team, 'admin');
    };
    auth.add_team = function(actor) {
      return auth.kratos._is_kratos_admin(actor);
    };
    auth.remove_team = function(actor) {
      return auth.kratos._is_kratos_admin(actor);
    };
    auth.add_team_asset = function(actor, team, resource) {
      var ref;
      return auth.is_active_user(actor) && ((ref = auth[resource]) != null ? typeof ref.add_team_asset === "function" ? ref.add_team_asset(actor, team) : void 0 : void 0) || false;
    };
    auth.remove_team_asset = function(actor, team, resource) {
      var ref;
      return auth.is_active_user(actor) && ((ref = auth[resource]) != null ? typeof ref.remove_team_asset === "function" ? ref.remove_team_asset(actor, team) : void 0 : void 0) || false;
    };
    auth.add_team_member = function(actor, team, role) {
      if (indexOf.call(auth.roles.team_admin, role) >= 0) {
        return auth.kratos._is_kratos_admin(actor);
      } else if (indexOf.call(auth.roles.team, role) >= 0) {
        return auth.kratos._is_kratos_admin(actor) || auth._is_team_admin(actor, team);
      } else {
        return false;
      }
    };
    auth.remove_team_member = function(actor, team, role) {
      if (indexOf.call(auth.roles.team_admin, role) >= 0) {
        return auth.kratos._is_kratos_admin(actor);
      } else {
        return auth.kratos._is_kratos_admin(actor) || auth._is_team_admin(actor, team);
      }
    };
    auth.proxy_resource = function(actor, team, resource, proxyAction) {
      var ref, ref1;
      return auth.is_active_user(actor) && ((ref = auth[resource]) != null ? (ref1 = ref.proxy) != null ? typeof ref1[proxyAction] === "function" ? ref1[proxyAction](actor, team) : void 0 : void 0 : void 0) || false;
    };
    auth.add_user = function(actor) {
      return auth.kratos._is_kratos_admin(actor);
    };
    auth.remove_user = function(actor) {
      return auth.kratos._is_kratos_admin(actor);
    };
    auth.add_resource_role = function(actor, resource, role) {
      var ref;
      return auth.is_active_user(actor) && ((ref = auth[resource]) != null ? typeof ref.add_resource_role === "function" ? ref.add_resource_role(actor, role) : void 0 : void 0) || false;
    };
    auth.remove_resource_role = function(actor, resource, role) {
      var ref;
      return auth.is_active_user(actor) && ((ref = auth[resource]) != null ? typeof ref.remove_resource_role === "function" ? ref.remove_resource_role(actor, role) : void 0 : void 0) || false;
    };
    auth.add_user_data = function(actor, user) {
      return auth.is_active_user(actor) && (auth.is_same_user(actor, user) || auth.is_system_user(actor));
    };
    auth.kratos = require('./kratos')(validation);
    auth.roles = {
      team: ['admin', 'member'],
      team_admin: ['admin'],
      resource: {
        kratos: ['admin', 'disabled']
      }
    };
    auth.resources = [];
    plugins.forEach(function(plugin) {
      auth[plugin.name] = plugin.authorization(validation);
      auth.roles.team = auth.roles.team.concat(plugin.roles.team);
      auth.roles.team_admin = auth.roles.team_admin.concat(plugin.roles.team_admin);
      auth.roles.resource[plugin.name] = plugin.roles.resource;
      return auth.resources.push(plugin.name);
    });
    auth.roles.team = _.uniq(auth.roles.team);
    auth.roles.team_admin = _.uniq(auth.roles.team_admin);
    return auth;
  };

}).call(this);
