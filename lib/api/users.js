// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, _, conf, couch_utils, doAction, isInt, processReq, users, utils, uuid, validation,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  utils = require('../utils');

  couch_utils = require('../couch_utils');

  uuid = require('node-uuid');

  conf = require('../config');

  Promise = require('pantheon-helpers').promise;

  doAction = require('../doAction').doAction;

  validation = require('../validation');

  users = {};

  processReq = function(req) {
    var actor, params, userName;
    params = req.params;
    userName = params.userId;
    actor = req.session.user;
    if (userName.indexOf('org.couchdb.user:') === 0) {
      userName = userName.slice(17);
    }
    return [actor, userName, params];
  };

  isInt = function(s) {
    return String(parseInt(s)) === s;
  };

  users.getUsers = function(client, opts, callback) {

    /*
    opts:
      enabled - true (default): return only enabled; false: return only disabled
      names - return only those active users with the names specified in the list
    
    names will override disabled
     */
    var enabled, params;
    if (_.isFunction(opts) || opts === 'promise') {
      callback = opts;
    }
    opts || (opts = {});
    params = {
      include_docs: 'true'
    };
    if (opts.names) {
      params.keys = opts.names.map(function(name) {
        return [true, name];
      });
    } else {
      enabled = opts.enabled === false ? false : true;
      _.extend(params, {
        startkey: [enabled],
        endkey: [enabled, {}]
      });
    }
    return client.use('_users').viewWithList('base', 'by_name', 'get_users', params, callback);
  };

  users.handleGetUsers = function(req, resp) {
    var ref, resource, rsrc, rsrcId;
    resource = null;
    ref = req.query;
    for (rsrc in ref) {
      rsrcId = ref[rsrc];
      if (indexOf.call(validation.auth.resources, rsrc) >= 0) {
        resource = rsrc;
        break;
      }
    }
    if (resource) {
      if (isInt(rsrcId)) {
        rsrcId = parseInt(rsrcId);
      }
      return users.getUserByResourceId(req.couch, resource, rsrcId).pipe(resp);
    } else {
      req.query.enabled = req.query.enabled !== 'false';
      return users.getUsers(req.couch, req.query).pipe(resp);
    }
  };

  users.getUserByResourceId = function(client, resource, resourceId, callback) {
    return client.use('_users').viewWithList('base', 'by_resource_id', 'get_user', {
      include_docs: true,
      key: [resource, resourceId]
    }, callback);
  };

  users.getUser = function(client, userName, callback) {

    /* will return system user if callback or promise, but not if stream */
    var isSystemUser, systemUser, systemUserName;
    systemUserName = conf.COUCHDB.SYSTEM_USER;
    systemUser = {
      name: systemUserName,
      roles: []
    };
    isSystemUser = conf.COUCHDB.SYSTEM_USER === userName;
    if (isSystemUser && _.isFunction(callback)) {
      return callback(null, systemUser);
    } else if (isSystemUser && callback === 'promise') {
      return Promise.resolve(systemUser);
    } else {
      return couch_utils.rewrite(client.use('_users'), 'base', '/users/org.couchdb.user:' + userName, callback);
    }
  };

  users.handleGetUser = function(req, resp) {
    var actor, params, ref, userName;
    ref = processReq(req), actor = ref[0], userName = ref[1], params = ref[2];
    return users.getUser(req.couch, userName).pipe(resp);
  };

  users.addRole = function(actor, userName, resource, role) {
    var userId;
    userId = 'org.couchdb.user:' + userName;
    return doAction('_users', actor, userId, {
      a: 'r+',
      resource: resource,
      role: role
    });
  };

  users.removeRole = function(actor, userName, resource, role) {
    var userId;
    userId = 'org.couchdb.user:' + userName;
    return doAction('_users', actor, userId, {
      a: 'r-',
      resource: resource,
      role: role
    });
  };

  users.handleAddRole = function(req, resp) {
    var actor, params, promise, ref, userName;
    ref = processReq(req), actor = ref[0], userName = ref[1], params = ref[2];
    promise = users.addRole(actor, userName, params.resource, params.role);
    return Promise.sendHttp(promise, resp);
  };

  users.handleRemoveRole = function(req, resp) {
    var actor, params, promise, ref, userName;
    ref = processReq(req), actor = ref[0], userName = ref[1], params = ref[2];
    promise = users.removeRole(actor, userName, params.resource, params.role);
    return Promise.sendHttp(promise, resp);
  };

  users.addData = function(actor, userName, path, data) {
    var userId;
    userId = 'org.couchdb.user:' + userName;
    return doAction('_users', actor, userId, {
      a: 'd+',
      path: path,
      data: data
    });
  };

  users.handleAddData = function(req, resp) {
    var actor, data, params, path, pathString, promise, ref, userName;
    ref = processReq(req), actor = ref[0], userName = ref[1], params = ref[2];
    pathString = params.path || '';
    path = _.compact(pathString.split('/'));
    data = req.body;
    if (_.isArray(data) || !_.isObject(data)) {
      return resp.status(400).end(JSON.stringify({
        'error': 'bad_request ',
        'msg': 'data must be an object - {}'
      }));
    }
    promise = users.addData(actor, userName, path, data);
    return Promise.sendHttp(promise, resp);
  };

  users.reactivateUser = function(actor, userName) {
    var userId;
    userId = 'org.couchdb.user:' + userName;
    return doAction('_users', actor, userId, {
      a: 'u+'
    });
  };

  users.handleReactivateUser = function(req, resp) {
    var actor, params, ref, userName;
    ref = processReq(req), actor = ref[0], userName = ref[1], params = ref[2];
    promise(users.reactivateUser(actor, userName));
    return Promise.sendHttp(promise, resp);
  };

  users.deactivateUser = function(actor, userName) {
    var userId;
    userId = 'org.couchdb.user:' + userName;
    return doAction('_users', actor, userId, {
      a: 'u-'
    });
  };

  users.handleDeactivateUser = function(req, resp) {
    var actor, params, ref, userName;
    ref = processReq(req), actor = ref[0], userName = ref[1], params = ref[2];
    return users.deactivateUser(actor, userName);
    return Promise.sendHttp(promise, resp);
  };

  users.createUser = function(actor, userData) {
    userData.password = conf.COUCH_PWD;
    return doAction('_users', actor, null, {
      a: 'u+',
      record: userData
    });
  };

  users.handleCreateUser = function(req, resp) {

    /*
    body must be a hash ({}).
    body must include the following data:
    {
      data: {
        username: <str>,
        <optional additional data>...
      }
    }
    body may include the following data:
    {
      roles: <array>
      rsrcs: {
        <rsrc str>: <hash>
      }
    
    }
     */
    var promise;
    promise = users.createUser(actor, req.body);
    return Promise.sendHttp(promise, resp);
  };

  module.exports = users;

}).call(this);
